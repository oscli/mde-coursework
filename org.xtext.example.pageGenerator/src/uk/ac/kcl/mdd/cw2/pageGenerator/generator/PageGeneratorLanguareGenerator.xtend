/*
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.mdd.cw2.pageGenerator.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import uk.ac.kcl.mdd.cw2.pageGenerator.pageGeneratorLanguare.*


/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class PageGeneratorLanguareGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val model = resource.contents.head as WebPage
		
		fsa.generateFile(deriveTargetFileNameFor(model, resource), model.generate)
	}
				
		def deriveTargetFileNameFor(WebPage page, Resource resource) {
			resource.URI.appendFileExtension('html').lastSegment
		}
		
		def generate(WebPage page) '''
		<!DOCTYPE html>
		<html>
		<head>
		«page.pageElements.map[generateHTML("head")].join('\n')»
		</head>
		<body>
		«page.pageElements.map[generateHTML("body")].join('\n')»
		</body>
		</html>
		
	'''
		
		
 	dispatch def generateHTML(pageElement pge, String env) ''''''
	
	dispatch def generateHTML(Body body, String env) '''
	 «if(env === "body") body.bodyElements.map[generateBody].join('\n')»
	 '''
	 
	 dispatch def generateHTML(Head head, String env)'''
	 «if(env === "head") head.headElements.map[generateHead].join('\n')»
	 '''
	 
	 //head

	dispatch def generateHead(headElement hd)'''
	'''
	
	dispatch def generateHead(Title title)'''
	 <title>«title.name»</title>
	 '''
	 
	 dispatch def generateHead(Label label)'''
	 <meta charset="utf-8" name="«label.name»" content="«label.label»">
	 '''
	 
	 
	 //body

	dispatch def generateBody(bodyElement bd) ''''''
	
	dispatch def generateBody(Heading heading)'''
	<h«heading.index» style="«if (heading.fontColor !== null) '''color:«generateColourExpression(heading.fontColor)»;'''»
	«if (heading.lpadding !== 0) '''padding-left:«heading.lpadding»px;'''»
	«if (heading.rpadding !== 0) '''padding-right:«heading.rpadding»px;'''»
	«if (heading.tpadding !== 0) '''padding-top:«heading.tpadding»px;'''»
	«if (heading.bpadding !== 0) '''padding-bottom:«heading.bpadding»px;'''»
	«if (heading.location !== null) '''float:«heading.location.location»;'''»">«heading.title»</h«heading.index»>
	'''
	
	dispatch def generateBody(Text text)'''
	<p style="«if (text.fontColor !== null) '''color:«generateColourExpression(text.fontColor)»;'''»
	«if (text.fontSize !== 0) '''font-size:«text.fontSize»px;'''»
	«if (text.lpadding !== 0) '''padding-left:«text.lpadding»px;'''»
	«if (text.rpadding !== 0) '''padding-right:«text.rpadding»px;'''»
	«if (text.tpadding !== 0) '''padding-top:«text.tpadding»px;'''»
	«if (text.bpadding !== 0) '''padding-bottom:«text.bpadding»px;'''»
	«if (text.location !== null)'''float:«text.location.location»'''»">
	«text.content.generateStringExpression»</p>
	'''
	
	dispatch def generateBody(Picture picture) '''
	<img src=«picture.picUrl»
	«if (picture.alt !== null)'''alt=«picture.alt»'''» style="«
	if (picture.lpadding !== 0) '''padding-left:«picture.lpadding»px;'''»
	«if (picture.rpadding !== 0) '''padding-right:«picture.rpadding»px;'''»
	«if (picture.tpadding !== 0) '''padding-top:«picture.tpadding»px;'''»
	«if (picture.bpadding !== 0) '''padding-bottom:«picture.bpadding»px;'''»
	«if (picture.location !== null)'''float:«picture.location.location»;'''»
	«if (picture.size !== null) '''«generateSizeExpression(picture.size, 'width')»;'''»
	«if (picture.size !== null) '''«generateSizeExpression(picture.size, 'height')»;'''»">
	'''
	
	dispatch def generateBody(Link link) '''
	<a href="«link.url»" «if(link.target !==null) '''target="«link.target»"'''» style="«
	if (link.lpadding !== 0) '''padding-left:«link.lpadding»px;'''»
	«if (link.rpadding !== 0) '''padding-right:«link.rpadding»px;'''»
	«if (link.tpadding !== 0) '''padding-top:«link.tpadding»px;'''»
	«if (link.bpadding !== 0) '''padding-bottom:«link.bpadding»px;'''»
	«if (link.location !== null)'''float:«link.location.location»'''»
	«if (link.fontColor !== null)'''color:«generateColourExpression(link.fontColor)»;'''»
	«if (link.fontSize !== 0)'''font-size:«link.fontSize»px;'''»">«link.name»</a>
	'''
	
	dispatch def generateBody(Section section)'''
	<div «if( section.name!==null ) '''id=«section.name»'''»  style="
	«if (section.bgColor !== null) '''background-color:«generateColourExpression(section.bgColor)»;'''»
	«if (section.size !== null) '''«generateSizeExpression(section.size, 'height')»'''»
	«if (section.size !== null) '''«generateSizeExpression(section.size, 'width')»'''»
	«if (section.location !== null) '''float:«section.location.location»;'''»
	«if (section.textLocation !== null) '''text-align:«section.textLocation»;'''»
	«if (section.lpadding !== 0) '''padding-left:«section.lpadding»px;'''»
	«if (section.rpadding !== 0) '''padding-right:«section.rpadding»px;'''»
	«if (section.tpadding !== 0) '''padding-top:«section.tpadding»px;'''else '''padding-top:1px'''»
	«if (section.bpadding !== 0) '''padding-bottom:«section.bpadding»px;'''»">
	«section.bodyElements.map[generateBody].join('\n')»
	</div>
	'''
	
	
	//expression
	
	dispatch def generateSizeExpression(primarySize sz, String type)''''''
	dispatch def generateSizeExpression(SizeExpression sz, String type)'''
		«if(type === 'width'&& sz.size.width>0) '''width:«sz.size.width»px;''' else if(type === 'height'&& sz.size.height>0) '''height:«sz.size.height»px;'''»
	'''
	
	dispatch def generateSizeExpression(sizeValue sz, String type)'''
		«if(type === 'width'&& sz.width>0) '''width:«sz.width»px;''' else if(type==='height' && sz.height>0) '''height:«sz.height»px;'''»
	'''	
	dispatch def generateColourExpression(primaryColour pc) ''''''
	dispatch def generateColourExpression(colourValue cv) '''
	«cv.colour»
	'''
	dispatch def generateColourExpression(ColourExpression ce) '''
	rgb(«ce.colour.red»,«ce.colour.green»,«ce.colour.blue»)
	'''
		
	dispatch def generateStringExpression(primaryString ps)''''''
	
	dispatch def generateStringExpression(stringValue sv)'''
	«sv.^val»
	'''
	
	dispatch def generateStringExpression(stringReference sr)'''
	<span style="«if (sr.stringreference.fontColor !== null)
	 '''color:«sr.stringreference.fontColor.generateColourExpression»;'''»«
	 if (sr.stringreference.fontSize !== 0)
	 '''font-size:«sr.stringreference.fontSize»px;'''»font-weight:bold;"> «sr.stringreference.word»</span>
	'''
	
	dispatch def generateStringExpression(Content content)'''
	«content.left.generateStringExpression»«FOR idx: (0..content.separator.size-1)» «content.right.get(idx).generateStringExpression»«ENDFOR»
	'''
	
}
