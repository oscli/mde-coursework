/*
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.mdd.cw2.pageGenerator.validation

import java.util.Arrays
import java.util.List
import org.eclipse.xtext.validation.Check
import uk.ac.kcl.mdd.cw2.pageGenerator.pageGeneratorLanguare.ColourRGB
import uk.ac.kcl.mdd.cw2.pageGenerator.pageGeneratorLanguare.PageGeneratorLanguarePackage
import uk.ac.kcl.mdd.cw2.pageGenerator.pageGeneratorLanguare.SizeDeclaration
import uk.ac.kcl.mdd.cw2.pageGenerator.pageGeneratorLanguare.colourValue
import uk.ac.kcl.mdd.cw2.pageGenerator.pageGeneratorLanguare.sizeValue
import uk.ac.kcl.mdd.cw2.pageGenerator.pageGeneratorLanguare.locationexpression
import uk.ac.kcl.mdd.cw2.pageGenerator.typing.validation.PageGeneratorTypeSystemValidator

/** 
 * This class contains custom validation rules. 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class PageGeneratorLanguareValidator extends PageGeneratorTypeSystemValidator {
	@Check def void checkColourRGB(ColourRGB colour) {
		if (colour.getRed() > 255 || colour.getRed() < 0) {
			warning("Red value should between 0 and 255", PageGeneratorLanguarePackage.Literals.COLOUR_RGB__RED)
		}
		if (colour.getGreen() > 255 || colour.getGreen() < 0) {
			warning("Green value should between 0 and 255", PageGeneratorLanguarePackage.Literals.COLOUR_RGB__GREEN)
		}
		if (colour.getBlue() > 255 || colour.getBlue() < 0) {
			warning("Blue value should between 0 and 255", PageGeneratorLanguarePackage.Literals.COLOUR_RGB__BLUE)
		}
	}

	@Check def void checkSizeDeclaration(SizeDeclaration size) {
		if (size.getHeight() < 0) {
			warning("Height should be a positive integer", PageGeneratorLanguarePackage.Literals.SIZE_DECLARATION__HEIGHT)
		}
		if (size.getWidth() < 0) {
			warning("Width should be a positive integer", PageGeneratorLanguarePackage.Literals.SIZE_DECLARATION__WIDTH)
		}
	}

	@Check def void checkSizeValue(sizeValue size) {
		if (size.getHeight() < 0) {
			warning("Height should be a positive integer", PageGeneratorLanguarePackage.Literals.SIZE_VALUE__HEIGHT)
		}
		if (size.getWidth() < 0) {
			warning("Width should be a positive integer", PageGeneratorLanguarePackage.Literals.SIZE_VALUE__WIDTH)
		}
	}

	 @Check def void checkTitleString(locationexpression location) {
		if (!location.getLocation().equals("left") && !location.getLocation().equals("right") &&
			!location.getLocation().equals("center")) {
			warning("Title should be left,right or center",
				PageGeneratorLanguarePackage.Literals.LOCATIONEXPRESSION__LOCATION)
		}
	}
		
	@Check def void checkColour(colourValue colour) {
		var String colourNameString = '''aliceblue,antiquewhite,aqua,aquamarine,azure,beige,bisque,black,blanchedalmond,blue,blueviolet,brown,burlywood,cadetblue,chartreuse,chocolate,coral,cornflowerblue,cornsilk,crimson,cyan,darkblue,darkcyan,darkgoldenrod,darkgray,darkgreen,darkkhaki,darkmagenta,darkolivegreen,darkorange,darkorchid,darkred,darksalmon,darkseagreen,darkslateblue,darkslategray,darkturquoise,darkviolet,deeppink,deepskyblue,dimgray,dodgerblue,firebrick,floralwhite,forestgreen,fuchsia,gainsboro,ghostwhite,gold,goldenrod,gray,green,greenyellow,honeydew,hotpink,indianred,indigo,ivory,khaki,lavender,lavenderblush,lawngreen,lemonchiffon,lightblue,lightcoral,lightcyan,lightgoldenrodyellow,lightgray,lightgreen,lightpink,lightsalmon,lightseagreen,lightskyblue,lightslategray,lightsteelblue,lightyellow,lime,limegreen,linen,magenta,maroon,mediumaquamarine,mediumblue,mediumorchid,mediumpurple,mediumseagreen,mediumslateblue,mediumspringgreen,mediumturquoise,mediumvioletred,midnightblue,mintcream,mistyrose,moccasin,navajowhite,navy,oldlace,olive,olivedrab,orange,orangered,orchid,palegoldenrod,palegreen,paleturquoise,palevioletred,papayawhip,peachpuff,peru,pink,plum,powderblue,purple,red,rosybrown,royalblue,saddlebrown,salmon,sandybrown,seagreen,seashell,sienna,silver,skyblue,slateblue,slategray,snow,springgreen,steelblue,tan,teal,thistle,tomato,turquoise,violet,wheat,white,whitesmoke,yellow,yellowgreen'''.
					toString
		var String[] colourName = colourNameString.split(",")
		var List<String> colourNameList = Arrays::asList(colourName)
		if (!colourNameList.contains(exChange(colour.getColour()))) {
			warning("This is not a defined colour", PageGeneratorLanguarePackage.Literals::COLOUR_VALUE__COLOUR)
		}
	}
	
	//exchange upper case character to lower case
	def static String exChange(String str) {
		var StringBuffer sb = new StringBuffer()
		if (str !== null) {
			for (var int i = 0; i < str.length(); i++) {
				var char c = (str.charAt(i)) as char
				if (Character.isUpperCase(c)) {
					sb.append(Character.toLowerCase(c))
				} 
				else{sb.append(c)}
			}
		}
		return sb.toString()
	}
	
	
}
	

	
	
	
	
	
	
	



