/**
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.mdd.cw2.pageGenerator.pageGeneratorLanguare.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import uk.ac.kcl.mdd.cw2.pageGenerator.pageGeneratorLanguare.ColourExpression;
import uk.ac.kcl.mdd.cw2.pageGenerator.pageGeneratorLanguare.ColourRGB;
import uk.ac.kcl.mdd.cw2.pageGenerator.pageGeneratorLanguare.PageGeneratorLanguarePackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Colour Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.mdd.cw2.pageGenerator.pageGeneratorLanguare.impl.ColourExpressionImpl#getColour <em>Colour</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ColourExpressionImpl extends primaryColourImpl implements ColourExpression
{
  /**
   * The cached value of the '{@link #getColour() <em>Colour</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColour()
   * @generated
   * @ordered
   */
  protected ColourRGB colour;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ColourExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PageGeneratorLanguarePackage.Literals.COLOUR_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ColourRGB getColour()
  {
    if (colour != null && colour.eIsProxy())
    {
      InternalEObject oldColour = (InternalEObject)colour;
      colour = (ColourRGB)eResolveProxy(oldColour);
      if (colour != oldColour)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, PageGeneratorLanguarePackage.COLOUR_EXPRESSION__COLOUR, oldColour, colour));
      }
    }
    return colour;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ColourRGB basicGetColour()
  {
    return colour;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setColour(ColourRGB newColour)
  {
    ColourRGB oldColour = colour;
    colour = newColour;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PageGeneratorLanguarePackage.COLOUR_EXPRESSION__COLOUR, oldColour, colour));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PageGeneratorLanguarePackage.COLOUR_EXPRESSION__COLOUR:
        if (resolve) return getColour();
        return basicGetColour();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PageGeneratorLanguarePackage.COLOUR_EXPRESSION__COLOUR:
        setColour((ColourRGB)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PageGeneratorLanguarePackage.COLOUR_EXPRESSION__COLOUR:
        setColour((ColourRGB)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PageGeneratorLanguarePackage.COLOUR_EXPRESSION__COLOUR:
        return colour != null;
    }
    return super.eIsSet(featureID);
  }

} //ColourExpressionImpl
