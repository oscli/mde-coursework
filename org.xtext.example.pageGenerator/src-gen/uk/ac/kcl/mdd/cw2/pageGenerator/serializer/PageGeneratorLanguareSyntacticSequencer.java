/*
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.mdd.cw2.pageGenerator.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import uk.ac.kcl.mdd.cw2.pageGenerator.services.PageGeneratorLanguareGrammarAccess;

@SuppressWarnings("all")
public class PageGeneratorLanguareSyntacticSequencer extends AbstractSyntacticSequencer {

	protected PageGeneratorLanguareGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Heading_CommaKeyword_10_3_q;
	protected AbstractElementAlias match_Heading_CommaKeyword_11_3_q;
	protected AbstractElementAlias match_Heading_CommaKeyword_12_3_q;
	protected AbstractElementAlias match_Heading_CommaKeyword_6_q;
	protected AbstractElementAlias match_Heading_CommaKeyword_7_3_q;
	protected AbstractElementAlias match_Heading_CommaKeyword_8_3_q;
	protected AbstractElementAlias match_Heading_CommaKeyword_9_3_q;
	protected AbstractElementAlias match_Link_CommaKeyword_10_3_q;
	protected AbstractElementAlias match_Link_CommaKeyword_3_3_q;
	protected AbstractElementAlias match_Link_CommaKeyword_4_3_q;
	protected AbstractElementAlias match_Link_CommaKeyword_5_3_q;
	protected AbstractElementAlias match_Link_CommaKeyword_6_3_q;
	protected AbstractElementAlias match_Link_CommaKeyword_7_3_q;
	protected AbstractElementAlias match_Link_CommaKeyword_8_3_q;
	protected AbstractElementAlias match_Link_CommaKeyword_9_3_q;
	protected AbstractElementAlias match_Picture_CommaKeyword_13_q;
	protected AbstractElementAlias match_Picture_CommaKeyword_3_3_q;
	protected AbstractElementAlias match_Picture_CommaKeyword_4_3_q;
	protected AbstractElementAlias match_Picture_CommaKeyword_5_3_q;
	protected AbstractElementAlias match_Picture_CommaKeyword_6_3_q;
	protected AbstractElementAlias match_Picture_CommaKeyword_7_3_q;
	protected AbstractElementAlias match_Picture_CommaKeyword_8_3_q;
	protected AbstractElementAlias match_Picture_CommaKeyword_9_3_q;
	protected AbstractElementAlias match_Section_CommaKeyword_10_3_q;
	protected AbstractElementAlias match_Section_CommaKeyword_3_3_q;
	protected AbstractElementAlias match_Section_CommaKeyword_4_3_q;
	protected AbstractElementAlias match_Section_CommaKeyword_5_3_q;
	protected AbstractElementAlias match_Section_CommaKeyword_6_3_q;
	protected AbstractElementAlias match_Section_CommaKeyword_7_3_q;
	protected AbstractElementAlias match_Section_CommaKeyword_8_3_q;
	protected AbstractElementAlias match_Section_CommaKeyword_9_3_q;
	protected AbstractElementAlias match_Text_CommaKeyword_3_3_q;
	protected AbstractElementAlias match_Text_CommaKeyword_4_3_q;
	protected AbstractElementAlias match_Text_CommaKeyword_5_3_q;
	protected AbstractElementAlias match_Text_CommaKeyword_6_3_q;
	protected AbstractElementAlias match_Text_CommaKeyword_7_3_q;
	protected AbstractElementAlias match_Text_CommaKeyword_8_3_q;
	protected AbstractElementAlias match_Text_CommaKeyword_9_3_q;
	protected AbstractElementAlias match_stringDeclaration_CommaKeyword_3_3_q;
	protected AbstractElementAlias match_stringDeclaration_CommaKeyword_4_3_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (PageGeneratorLanguareGrammarAccess) access;
		match_Heading_CommaKeyword_10_3_q = new TokenAlias(false, true, grammarAccess.getHeadingAccess().getCommaKeyword_10_3());
		match_Heading_CommaKeyword_11_3_q = new TokenAlias(false, true, grammarAccess.getHeadingAccess().getCommaKeyword_11_3());
		match_Heading_CommaKeyword_12_3_q = new TokenAlias(false, true, grammarAccess.getHeadingAccess().getCommaKeyword_12_3());
		match_Heading_CommaKeyword_6_q = new TokenAlias(false, true, grammarAccess.getHeadingAccess().getCommaKeyword_6());
		match_Heading_CommaKeyword_7_3_q = new TokenAlias(false, true, grammarAccess.getHeadingAccess().getCommaKeyword_7_3());
		match_Heading_CommaKeyword_8_3_q = new TokenAlias(false, true, grammarAccess.getHeadingAccess().getCommaKeyword_8_3());
		match_Heading_CommaKeyword_9_3_q = new TokenAlias(false, true, grammarAccess.getHeadingAccess().getCommaKeyword_9_3());
		match_Link_CommaKeyword_10_3_q = new TokenAlias(false, true, grammarAccess.getLinkAccess().getCommaKeyword_10_3());
		match_Link_CommaKeyword_3_3_q = new TokenAlias(false, true, grammarAccess.getLinkAccess().getCommaKeyword_3_3());
		match_Link_CommaKeyword_4_3_q = new TokenAlias(false, true, grammarAccess.getLinkAccess().getCommaKeyword_4_3());
		match_Link_CommaKeyword_5_3_q = new TokenAlias(false, true, grammarAccess.getLinkAccess().getCommaKeyword_5_3());
		match_Link_CommaKeyword_6_3_q = new TokenAlias(false, true, grammarAccess.getLinkAccess().getCommaKeyword_6_3());
		match_Link_CommaKeyword_7_3_q = new TokenAlias(false, true, grammarAccess.getLinkAccess().getCommaKeyword_7_3());
		match_Link_CommaKeyword_8_3_q = new TokenAlias(false, true, grammarAccess.getLinkAccess().getCommaKeyword_8_3());
		match_Link_CommaKeyword_9_3_q = new TokenAlias(false, true, grammarAccess.getLinkAccess().getCommaKeyword_9_3());
		match_Picture_CommaKeyword_13_q = new TokenAlias(false, true, grammarAccess.getPictureAccess().getCommaKeyword_13());
		match_Picture_CommaKeyword_3_3_q = new TokenAlias(false, true, grammarAccess.getPictureAccess().getCommaKeyword_3_3());
		match_Picture_CommaKeyword_4_3_q = new TokenAlias(false, true, grammarAccess.getPictureAccess().getCommaKeyword_4_3());
		match_Picture_CommaKeyword_5_3_q = new TokenAlias(false, true, grammarAccess.getPictureAccess().getCommaKeyword_5_3());
		match_Picture_CommaKeyword_6_3_q = new TokenAlias(false, true, grammarAccess.getPictureAccess().getCommaKeyword_6_3());
		match_Picture_CommaKeyword_7_3_q = new TokenAlias(false, true, grammarAccess.getPictureAccess().getCommaKeyword_7_3());
		match_Picture_CommaKeyword_8_3_q = new TokenAlias(false, true, grammarAccess.getPictureAccess().getCommaKeyword_8_3());
		match_Picture_CommaKeyword_9_3_q = new TokenAlias(false, true, grammarAccess.getPictureAccess().getCommaKeyword_9_3());
		match_Section_CommaKeyword_10_3_q = new TokenAlias(false, true, grammarAccess.getSectionAccess().getCommaKeyword_10_3());
		match_Section_CommaKeyword_3_3_q = new TokenAlias(false, true, grammarAccess.getSectionAccess().getCommaKeyword_3_3());
		match_Section_CommaKeyword_4_3_q = new TokenAlias(false, true, grammarAccess.getSectionAccess().getCommaKeyword_4_3());
		match_Section_CommaKeyword_5_3_q = new TokenAlias(false, true, grammarAccess.getSectionAccess().getCommaKeyword_5_3());
		match_Section_CommaKeyword_6_3_q = new TokenAlias(false, true, grammarAccess.getSectionAccess().getCommaKeyword_6_3());
		match_Section_CommaKeyword_7_3_q = new TokenAlias(false, true, grammarAccess.getSectionAccess().getCommaKeyword_7_3());
		match_Section_CommaKeyword_8_3_q = new TokenAlias(false, true, grammarAccess.getSectionAccess().getCommaKeyword_8_3());
		match_Section_CommaKeyword_9_3_q = new TokenAlias(false, true, grammarAccess.getSectionAccess().getCommaKeyword_9_3());
		match_Text_CommaKeyword_3_3_q = new TokenAlias(false, true, grammarAccess.getTextAccess().getCommaKeyword_3_3());
		match_Text_CommaKeyword_4_3_q = new TokenAlias(false, true, grammarAccess.getTextAccess().getCommaKeyword_4_3());
		match_Text_CommaKeyword_5_3_q = new TokenAlias(false, true, grammarAccess.getTextAccess().getCommaKeyword_5_3());
		match_Text_CommaKeyword_6_3_q = new TokenAlias(false, true, grammarAccess.getTextAccess().getCommaKeyword_6_3());
		match_Text_CommaKeyword_7_3_q = new TokenAlias(false, true, grammarAccess.getTextAccess().getCommaKeyword_7_3());
		match_Text_CommaKeyword_8_3_q = new TokenAlias(false, true, grammarAccess.getTextAccess().getCommaKeyword_8_3());
		match_Text_CommaKeyword_9_3_q = new TokenAlias(false, true, grammarAccess.getTextAccess().getCommaKeyword_9_3());
		match_stringDeclaration_CommaKeyword_3_3_q = new TokenAlias(false, true, grammarAccess.getStringDeclarationAccess().getCommaKeyword_3_3());
		match_stringDeclaration_CommaKeyword_4_3_q = new TokenAlias(false, true, grammarAccess.getStringDeclarationAccess().getCommaKeyword_4_3());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Heading_CommaKeyword_10_3_q.equals(syntax))
				emit_Heading_CommaKeyword_10_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Heading_CommaKeyword_11_3_q.equals(syntax))
				emit_Heading_CommaKeyword_11_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Heading_CommaKeyword_12_3_q.equals(syntax))
				emit_Heading_CommaKeyword_12_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Heading_CommaKeyword_6_q.equals(syntax))
				emit_Heading_CommaKeyword_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Heading_CommaKeyword_7_3_q.equals(syntax))
				emit_Heading_CommaKeyword_7_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Heading_CommaKeyword_8_3_q.equals(syntax))
				emit_Heading_CommaKeyword_8_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Heading_CommaKeyword_9_3_q.equals(syntax))
				emit_Heading_CommaKeyword_9_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Link_CommaKeyword_10_3_q.equals(syntax))
				emit_Link_CommaKeyword_10_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Link_CommaKeyword_3_3_q.equals(syntax))
				emit_Link_CommaKeyword_3_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Link_CommaKeyword_4_3_q.equals(syntax))
				emit_Link_CommaKeyword_4_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Link_CommaKeyword_5_3_q.equals(syntax))
				emit_Link_CommaKeyword_5_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Link_CommaKeyword_6_3_q.equals(syntax))
				emit_Link_CommaKeyword_6_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Link_CommaKeyword_7_3_q.equals(syntax))
				emit_Link_CommaKeyword_7_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Link_CommaKeyword_8_3_q.equals(syntax))
				emit_Link_CommaKeyword_8_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Link_CommaKeyword_9_3_q.equals(syntax))
				emit_Link_CommaKeyword_9_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Picture_CommaKeyword_13_q.equals(syntax))
				emit_Picture_CommaKeyword_13_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Picture_CommaKeyword_3_3_q.equals(syntax))
				emit_Picture_CommaKeyword_3_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Picture_CommaKeyword_4_3_q.equals(syntax))
				emit_Picture_CommaKeyword_4_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Picture_CommaKeyword_5_3_q.equals(syntax))
				emit_Picture_CommaKeyword_5_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Picture_CommaKeyword_6_3_q.equals(syntax))
				emit_Picture_CommaKeyword_6_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Picture_CommaKeyword_7_3_q.equals(syntax))
				emit_Picture_CommaKeyword_7_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Picture_CommaKeyword_8_3_q.equals(syntax))
				emit_Picture_CommaKeyword_8_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Picture_CommaKeyword_9_3_q.equals(syntax))
				emit_Picture_CommaKeyword_9_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Section_CommaKeyword_10_3_q.equals(syntax))
				emit_Section_CommaKeyword_10_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Section_CommaKeyword_3_3_q.equals(syntax))
				emit_Section_CommaKeyword_3_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Section_CommaKeyword_4_3_q.equals(syntax))
				emit_Section_CommaKeyword_4_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Section_CommaKeyword_5_3_q.equals(syntax))
				emit_Section_CommaKeyword_5_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Section_CommaKeyword_6_3_q.equals(syntax))
				emit_Section_CommaKeyword_6_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Section_CommaKeyword_7_3_q.equals(syntax))
				emit_Section_CommaKeyword_7_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Section_CommaKeyword_8_3_q.equals(syntax))
				emit_Section_CommaKeyword_8_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Section_CommaKeyword_9_3_q.equals(syntax))
				emit_Section_CommaKeyword_9_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Text_CommaKeyword_3_3_q.equals(syntax))
				emit_Text_CommaKeyword_3_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Text_CommaKeyword_4_3_q.equals(syntax))
				emit_Text_CommaKeyword_4_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Text_CommaKeyword_5_3_q.equals(syntax))
				emit_Text_CommaKeyword_5_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Text_CommaKeyword_6_3_q.equals(syntax))
				emit_Text_CommaKeyword_6_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Text_CommaKeyword_7_3_q.equals(syntax))
				emit_Text_CommaKeyword_7_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Text_CommaKeyword_8_3_q.equals(syntax))
				emit_Text_CommaKeyword_8_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Text_CommaKeyword_9_3_q.equals(syntax))
				emit_Text_CommaKeyword_9_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_stringDeclaration_CommaKeyword_3_3_q.equals(syntax))
				emit_stringDeclaration_CommaKeyword_3_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_stringDeclaration_CommaKeyword_4_3_q.equals(syntax))
				emit_stringDeclaration_CommaKeyword_4_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     Rpadding=INT (ambiguity) '>' '=' title=STRING
	 *     Rpadding=INT (ambiguity) 'Padding-bottom' '=' Bpadding=INT
	 *     Rpadding=INT (ambiguity) 'Padding-top' '=' Tpadding=INT
	 */
	protected void emit_Heading_CommaKeyword_10_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     Tpadding=INT (ambiguity) '>' '=' title=STRING
	 *     Tpadding=INT (ambiguity) 'Padding-bottom' '=' Bpadding=INT
	 */
	protected void emit_Heading_CommaKeyword_11_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     Bpadding=INT (ambiguity) '>' '=' title=STRING
	 */
	protected void emit_Heading_CommaKeyword_12_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     index=INT (ambiguity) '>' '=' title=STRING
	 *     index=INT (ambiguity) 'Font-colour' '=' fontColor=primaryColour
	 *     index=INT (ambiguity) 'Location' '=' location=locationexpression
	 *     index=INT (ambiguity) 'Padding-bottom' '=' Bpadding=INT
	 *     index=INT (ambiguity) 'Padding-left' '=' Lpadding=INT
	 *     index=INT (ambiguity) 'Padding-right' '=' Rpadding=INT
	 *     index=INT (ambiguity) 'Padding-top' '=' Tpadding=INT
	 */
	protected void emit_Heading_CommaKeyword_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     fontColor=primaryColour (ambiguity) '>' '=' title=STRING
	 *     fontColor=primaryColour (ambiguity) 'Location' '=' location=locationexpression
	 *     fontColor=primaryColour (ambiguity) 'Padding-bottom' '=' Bpadding=INT
	 *     fontColor=primaryColour (ambiguity) 'Padding-left' '=' Lpadding=INT
	 *     fontColor=primaryColour (ambiguity) 'Padding-right' '=' Rpadding=INT
	 *     fontColor=primaryColour (ambiguity) 'Padding-top' '=' Tpadding=INT
	 */
	protected void emit_Heading_CommaKeyword_7_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     location=locationexpression (ambiguity) '>' '=' title=STRING
	 *     location=locationexpression (ambiguity) 'Padding-bottom' '=' Bpadding=INT
	 *     location=locationexpression (ambiguity) 'Padding-left' '=' Lpadding=INT
	 *     location=locationexpression (ambiguity) 'Padding-right' '=' Rpadding=INT
	 *     location=locationexpression (ambiguity) 'Padding-top' '=' Tpadding=INT
	 */
	protected void emit_Heading_CommaKeyword_8_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     Lpadding=INT (ambiguity) '>' '=' title=STRING
	 *     Lpadding=INT (ambiguity) 'Padding-bottom' '=' Bpadding=INT
	 *     Lpadding=INT (ambiguity) 'Padding-right' '=' Rpadding=INT
	 *     Lpadding=INT (ambiguity) 'Padding-top' '=' Tpadding=INT
	 */
	protected void emit_Heading_CommaKeyword_9_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     location=locationexpression (ambiguity) '>' '=' url=STRING
	 */
	protected void emit_Link_CommaKeyword_10_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     target=STRING (ambiguity) '>' '=' url=STRING
	 *     target=STRING (ambiguity) 'Font-colour' '=' fontColor=primaryColour
	 *     target=STRING (ambiguity) 'Font-size' '=' fontSize=INT
	 *     target=STRING (ambiguity) 'Location' '=' location=locationexpression
	 *     target=STRING (ambiguity) 'Padding-bottom' '=' Bpadding=INT
	 *     target=STRING (ambiguity) 'Padding-left' '=' Lpadding=INT
	 *     target=STRING (ambiguity) 'Padding-right' '=' Rpadding=INT
	 *     target=STRING (ambiguity) 'Padding-top' '=' Tpadding=INT
	 */
	protected void emit_Link_CommaKeyword_3_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     Lpadding=INT (ambiguity) '>' '=' url=STRING
	 *     Lpadding=INT (ambiguity) 'Font-colour' '=' fontColor=primaryColour
	 *     Lpadding=INT (ambiguity) 'Font-size' '=' fontSize=INT
	 *     Lpadding=INT (ambiguity) 'Location' '=' location=locationexpression
	 *     Lpadding=INT (ambiguity) 'Padding-bottom' '=' Bpadding=INT
	 *     Lpadding=INT (ambiguity) 'Padding-right' '=' Rpadding=INT
	 *     Lpadding=INT (ambiguity) 'Padding-top' '=' Tpadding=INT
	 */
	protected void emit_Link_CommaKeyword_4_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     Rpadding=INT (ambiguity) '>' '=' url=STRING
	 *     Rpadding=INT (ambiguity) 'Font-colour' '=' fontColor=primaryColour
	 *     Rpadding=INT (ambiguity) 'Font-size' '=' fontSize=INT
	 *     Rpadding=INT (ambiguity) 'Location' '=' location=locationexpression
	 *     Rpadding=INT (ambiguity) 'Padding-bottom' '=' Bpadding=INT
	 *     Rpadding=INT (ambiguity) 'Padding-top' '=' Tpadding=INT
	 */
	protected void emit_Link_CommaKeyword_5_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     Tpadding=INT (ambiguity) '>' '=' url=STRING
	 *     Tpadding=INT (ambiguity) 'Font-colour' '=' fontColor=primaryColour
	 *     Tpadding=INT (ambiguity) 'Font-size' '=' fontSize=INT
	 *     Tpadding=INT (ambiguity) 'Location' '=' location=locationexpression
	 *     Tpadding=INT (ambiguity) 'Padding-bottom' '=' Bpadding=INT
	 */
	protected void emit_Link_CommaKeyword_6_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     Bpadding=INT (ambiguity) '>' '=' url=STRING
	 *     Bpadding=INT (ambiguity) 'Font-colour' '=' fontColor=primaryColour
	 *     Bpadding=INT (ambiguity) 'Font-size' '=' fontSize=INT
	 *     Bpadding=INT (ambiguity) 'Location' '=' location=locationexpression
	 */
	protected void emit_Link_CommaKeyword_7_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     fontColor=primaryColour (ambiguity) '>' '=' url=STRING
	 *     fontColor=primaryColour (ambiguity) 'Font-size' '=' fontSize=INT
	 *     fontColor=primaryColour (ambiguity) 'Location' '=' location=locationexpression
	 */
	protected void emit_Link_CommaKeyword_8_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     fontSize=INT (ambiguity) '>' '=' url=STRING
	 *     fontSize=INT (ambiguity) 'Location' '=' location=locationexpression
	 */
	protected void emit_Link_CommaKeyword_9_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     picUrl=STRING (ambiguity) ';' (rule end)
	 */
	protected void emit_Picture_CommaKeyword_13_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     size=primarySize (ambiguity) '>' '=' picUrl=STRING
	 *     size=primarySize (ambiguity) 'Location' '=' location=locationexpression
	 *     size=primarySize (ambiguity) 'Padding-bottom' '=' Bpadding=INT
	 *     size=primarySize (ambiguity) 'Padding-left' '=' Lpadding=INT
	 *     size=primarySize (ambiguity) 'Padding-right' '=' Rpadding=INT
	 *     size=primarySize (ambiguity) 'Padding-top' '=' Tpadding=INT
	 *     size=primarySize (ambiguity) 'alternative-text' '=' alt=STRING
	 */
	protected void emit_Picture_CommaKeyword_3_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     alt=STRING (ambiguity) '>' '=' picUrl=STRING
	 *     alt=STRING (ambiguity) 'Location' '=' location=locationexpression
	 *     alt=STRING (ambiguity) 'Padding-bottom' '=' Bpadding=INT
	 *     alt=STRING (ambiguity) 'Padding-left' '=' Lpadding=INT
	 *     alt=STRING (ambiguity) 'Padding-right' '=' Rpadding=INT
	 *     alt=STRING (ambiguity) 'Padding-top' '=' Tpadding=INT
	 */
	protected void emit_Picture_CommaKeyword_4_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     location=locationexpression (ambiguity) '>' '=' picUrl=STRING
	 *     location=locationexpression (ambiguity) 'Padding-bottom' '=' Bpadding=INT
	 *     location=locationexpression (ambiguity) 'Padding-left' '=' Lpadding=INT
	 *     location=locationexpression (ambiguity) 'Padding-right' '=' Rpadding=INT
	 *     location=locationexpression (ambiguity) 'Padding-top' '=' Tpadding=INT
	 */
	protected void emit_Picture_CommaKeyword_5_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     Lpadding=INT (ambiguity) '>' '=' picUrl=STRING
	 *     Lpadding=INT (ambiguity) 'Padding-bottom' '=' Bpadding=INT
	 *     Lpadding=INT (ambiguity) 'Padding-right' '=' Rpadding=INT
	 *     Lpadding=INT (ambiguity) 'Padding-top' '=' Tpadding=INT
	 */
	protected void emit_Picture_CommaKeyword_6_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     Rpadding=INT (ambiguity) '>' '=' picUrl=STRING
	 *     Rpadding=INT (ambiguity) 'Padding-bottom' '=' Bpadding=INT
	 *     Rpadding=INT (ambiguity) 'Padding-top' '=' Tpadding=INT
	 */
	protected void emit_Picture_CommaKeyword_7_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     Tpadding=INT (ambiguity) '>' '=' picUrl=STRING
	 *     Tpadding=INT (ambiguity) 'Padding-bottom' '=' Bpadding=INT
	 */
	protected void emit_Picture_CommaKeyword_8_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     Bpadding=INT (ambiguity) '>' '=' picUrl=STRING
	 */
	protected void emit_Picture_CommaKeyword_9_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     Bpadding=INT (ambiguity) '>' '{' bodyElements+=bodyElement
	 */
	protected void emit_Section_CommaKeyword_10_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     bgColor=primaryColour (ambiguity) '>' '{' bodyElements+=bodyElement
	 *     bgColor=primaryColour (ambiguity) 'Padding-bottom' '=' Bpadding=INT
	 *     bgColor=primaryColour (ambiguity) 'Padding-left' '=' Lpadding=INT
	 *     bgColor=primaryColour (ambiguity) 'Padding-right' '=' Rpadding=INT
	 *     bgColor=primaryColour (ambiguity) 'Padding-top' '=' Tpadding=INT
	 *     bgColor=primaryColour (ambiguity) 'Section-location' '=' location=locationexpression
	 *     bgColor=primaryColour (ambiguity) 'Size' '=' size=primarySize
	 *     bgColor=primaryColour (ambiguity) 'Text-location' '=' textLocation=locationexpression
	 */
	protected void emit_Section_CommaKeyword_3_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     size=primarySize (ambiguity) '>' '{' bodyElements+=bodyElement
	 *     size=primarySize (ambiguity) 'Padding-bottom' '=' Bpadding=INT
	 *     size=primarySize (ambiguity) 'Padding-left' '=' Lpadding=INT
	 *     size=primarySize (ambiguity) 'Padding-right' '=' Rpadding=INT
	 *     size=primarySize (ambiguity) 'Padding-top' '=' Tpadding=INT
	 *     size=primarySize (ambiguity) 'Section-location' '=' location=locationexpression
	 *     size=primarySize (ambiguity) 'Text-location' '=' textLocation=locationexpression
	 */
	protected void emit_Section_CommaKeyword_4_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     location=locationexpression (ambiguity) '>' '{' bodyElements+=bodyElement
	 *     location=locationexpression (ambiguity) 'Padding-bottom' '=' Bpadding=INT
	 *     location=locationexpression (ambiguity) 'Padding-left' '=' Lpadding=INT
	 *     location=locationexpression (ambiguity) 'Padding-right' '=' Rpadding=INT
	 *     location=locationexpression (ambiguity) 'Padding-top' '=' Tpadding=INT
	 *     location=locationexpression (ambiguity) 'Text-location' '=' textLocation=locationexpression
	 */
	protected void emit_Section_CommaKeyword_5_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     textLocation=locationexpression (ambiguity) '>' '{' bodyElements+=bodyElement
	 *     textLocation=locationexpression (ambiguity) 'Padding-bottom' '=' Bpadding=INT
	 *     textLocation=locationexpression (ambiguity) 'Padding-left' '=' Lpadding=INT
	 *     textLocation=locationexpression (ambiguity) 'Padding-right' '=' Rpadding=INT
	 *     textLocation=locationexpression (ambiguity) 'Padding-top' '=' Tpadding=INT
	 */
	protected void emit_Section_CommaKeyword_6_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     Lpadding=INT (ambiguity) '>' '{' bodyElements+=bodyElement
	 *     Lpadding=INT (ambiguity) 'Padding-bottom' '=' Bpadding=INT
	 *     Lpadding=INT (ambiguity) 'Padding-right' '=' Rpadding=INT
	 *     Lpadding=INT (ambiguity) 'Padding-top' '=' Tpadding=INT
	 */
	protected void emit_Section_CommaKeyword_7_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     Rpadding=INT (ambiguity) '>' '{' bodyElements+=bodyElement
	 *     Rpadding=INT (ambiguity) 'Padding-bottom' '=' Bpadding=INT
	 *     Rpadding=INT (ambiguity) 'Padding-top' '=' Tpadding=INT
	 */
	protected void emit_Section_CommaKeyword_8_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     Tpadding=INT (ambiguity) '>' '{' bodyElements+=bodyElement
	 *     Tpadding=INT (ambiguity) 'Padding-bottom' '=' Bpadding=INT
	 */
	protected void emit_Section_CommaKeyword_9_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     fontColor=primaryColour (ambiguity) '>' '=' content=Content
	 *     fontColor=primaryColour (ambiguity) 'Font-size' '=' fontSize=INT
	 *     fontColor=primaryColour (ambiguity) 'Location' '=' location=locationexpression
	 *     fontColor=primaryColour (ambiguity) 'Padding-bottom' '=' Bpadding=INT
	 *     fontColor=primaryColour (ambiguity) 'Padding-left' '=' Lpadding=INT
	 *     fontColor=primaryColour (ambiguity) 'Padding-right' '=' Rpadding=INT
	 *     fontColor=primaryColour (ambiguity) 'Padding-top' '=' Tpadding=INT
	 */
	protected void emit_Text_CommaKeyword_3_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     fontSize=INT (ambiguity) '>' '=' content=Content
	 *     fontSize=INT (ambiguity) 'Location' '=' location=locationexpression
	 *     fontSize=INT (ambiguity) 'Padding-bottom' '=' Bpadding=INT
	 *     fontSize=INT (ambiguity) 'Padding-left' '=' Lpadding=INT
	 *     fontSize=INT (ambiguity) 'Padding-right' '=' Rpadding=INT
	 *     fontSize=INT (ambiguity) 'Padding-top' '=' Tpadding=INT
	 */
	protected void emit_Text_CommaKeyword_4_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     location=locationexpression (ambiguity) '>' '=' content=Content
	 *     location=locationexpression (ambiguity) 'Padding-bottom' '=' Bpadding=INT
	 *     location=locationexpression (ambiguity) 'Padding-left' '=' Lpadding=INT
	 *     location=locationexpression (ambiguity) 'Padding-right' '=' Rpadding=INT
	 *     location=locationexpression (ambiguity) 'Padding-top' '=' Tpadding=INT
	 */
	protected void emit_Text_CommaKeyword_5_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     Lpadding=INT (ambiguity) '>' '=' content=Content
	 *     Lpadding=INT (ambiguity) 'Padding-bottom' '=' Bpadding=INT
	 *     Lpadding=INT (ambiguity) 'Padding-right' '=' Rpadding=INT
	 *     Lpadding=INT (ambiguity) 'Padding-top' '=' Tpadding=INT
	 */
	protected void emit_Text_CommaKeyword_6_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     Rpadding=INT (ambiguity) '>' '=' content=Content
	 *     Rpadding=INT (ambiguity) 'Padding-bottom' '=' Bpadding=INT
	 *     Rpadding=INT (ambiguity) 'Padding-top' '=' Tpadding=INT
	 */
	protected void emit_Text_CommaKeyword_7_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     Tpadding=INT (ambiguity) '>' '=' content=Content
	 *     Tpadding=INT (ambiguity) 'Padding-bottom' '=' Bpadding=INT
	 */
	protected void emit_Text_CommaKeyword_8_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     Bpadding=INT (ambiguity) '>' '=' content=Content
	 */
	protected void emit_Text_CommaKeyword_9_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     fontColor=primaryColour (ambiguity) '>' '=' word=STRING
	 *     fontColor=primaryColour (ambiguity) 'Font-size' '=' fontSize=INT
	 */
	protected void emit_stringDeclaration_CommaKeyword_3_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     fontSize=INT (ambiguity) '>' '=' word=STRING
	 */
	protected void emit_stringDeclaration_CommaKeyword_4_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
